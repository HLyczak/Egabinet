// <auto-generated />
using System;
using Egabinet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egabinet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230207203928_EditDoctor")]
    partial class EditDoctor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Egabinet.Models.Domain.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = "3e01671b-18fc-4f8c-bfd8-fa12666a99b6",
                            Adress = " Kolorowa 5",
                            Name = "Adam",
                            PermissionNumber = " 569853",
                            SpecializationId = "6a3d526e-1fb6-4de7-bde5-e0754fc58aec",
                            Surname = "Kowalski",
                            UserId = "ef9632fc-d406-412f-9b7a-09b902db6dfa"
                        },
                        new
                        {
                            Id = "1769f6fc-fb40-44ed-bb10-70c0c13a97e3",
                            Adress = " Zielona 5",
                            Name = "Zofia",
                            PermissionNumber = " 560053",
                            SpecializationId = "4e8effeb-0a99-4038-9420-0c543a3a28ac",
                            Surname = "Kowalski",
                            UserId = "785a5776-fbba-4021-a263-4b9daade6ac8"
                        },
                        new
                        {
                            Id = "ba61c248-a31d-4c10-9e7c-9d8d32defeea",
                            Adress = " Adama Mickiewicza 8",
                            Name = "Todor",
                            PermissionNumber = " 160053",
                            SpecializationId = "e86959d5-6eed-45f7-b5cb-6b8f68a4d085",
                            Surname = " Nowaki",
                            UserId = "452db704-3650-457a-a7da-ca545a521776"
                        },
                        new
                        {
                            Id = "519e3b1c-8357-470d-9643-9be49bd669a3",
                            Adress = " Obozowa 8",
                            Name = "Grzegorz",
                            PermissionNumber = " 560053",
                            SpecializationId = "690e47d4-996b-43b7-a23b-d9693cf5962c",
                            Surname = "Lem",
                            UserId = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f"
                        });
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Nurse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Nurse");

                    b.HasData(
                        new
                        {
                            Id = "9ae453af-8db3-440c-b8d0-1c55299ce188",
                            Address = " Różana 5",
                            Name = "AZofia",
                            PermissionNumber = " 509853",
                            Surname = "Stanecka",
                            UserId = "00221f79-bc71-4186-9e5d-bfd57a80a43f"
                        },
                        new
                        {
                            Id = "e40f8b49-f885-48c0-bb64-21c0d0813e88",
                            Address = " Topografów 5",
                            Name = "Hanna",
                            PermissionNumber = " 510053",
                            Surname = " Oklejka",
                            UserId = "32923230-6c8c-4510-b73e-d9bcf2484879"
                        },
                        new
                        {
                            Id = "68041977-3f99-4e4f-ac71-0b03a3606750",
                            Address = " os. Kolorowe 8",
                            Name = "Anna ",
                            PermissionNumber = " 169053",
                            Surname = " Austen",
                            UserId = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8"
                        },
                        new
                        {
                            Id = "965e09d6-0ed5-4e7a-8950-e252b1ae5380",
                            Address = " Obozowa 14",
                            Name = "Glżbieta Lem",
                            PermissionNumber = " 567053",
                            Surname = " Lockman",
                            UserId = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83"
                        });
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Patient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Pesel")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = "9262b74c-f7b4-47ba-8fcf-087241096f34",
                            Address = " Magnoliowa 5",
                            Name = "Adam",
                            Pesel = 85011259884L,
                            Surname = "Nowak",
                            UserId = "66126f74-f32b-435d-9e24-b3ed8b3d6011"
                        },
                        new
                        {
                            Id = "23159457-b301-4839-932a-3fd939f8b6c4",
                            Address = " Ostoja 5",
                            Name = "Zofia",
                            Pesel = 78020607221L,
                            Surname = "Stanecka",
                            UserId = "26dfb75e-5f31-4a54-9844-f019998a61d1"
                        },
                        new
                        {
                            Id = "9de0d585-60a6-445c-910c-e26ccaf46274",
                            Address = " Żeromskiego 4",
                            Name = "Austen",
                            Pesel = 95011259884L,
                            Surname = "Nowaki",
                            UserId = "64791af4-436d-4419-b3e1-14641bdb2493"
                        },
                        new
                        {
                            Id = "816c62f5-2b08-4042-8008-07a46b920921",
                            Address = " Obozowa 15",
                            Name = "Grzegorz",
                            Pesel = 65011259884L,
                            Surname = "Fus",
                            UserId = "cef7f7aa-d198-4373-b441-926d8e52dbb1"
                        });
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = "d36af7ac-73cb-459e-847f-0abea3581814",
                            Number = 1L
                        },
                        new
                        {
                            Id = "4b4e2a8f-ab04-40ab-827d-3c7789208e4c",
                            Number = 2L
                        },
                        new
                        {
                            Id = "c5f12060-322b-42be-bba6-689e2e0c5721",
                            Number = 3L
                        },
                        new
                        {
                            Id = "525e8058-b3a1-4a9f-83e5-355848d1e6c5",
                            Number = 4L
                        });
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            Id = "6a3d526e-1fb6-4de7-bde5-e0754fc58aec",
                            Value = "Lekarz rodzinny"
                        },
                        new
                        {
                            Id = "4e8effeb-0a99-4038-9420-0c543a3a28ac",
                            Value = "Endokrynolog"
                        },
                        new
                        {
                            Id = "e86959d5-6eed-45f7-b5cb-6b8f68a4d085",
                            Value = "Laryngolog"
                        },
                        new
                        {
                            Id = "690e47d4-996b-43b7-a23b-d9693cf5962c",
                            Value = "Stomatolog"
                        });
                });

            modelBuilder.Entity("Egabinet.Models.Domain.TimeSheet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("TimeSheet");

                    b.HasData(
                        new
                        {
                            Id = "06223eb9-588c-4b2d-a0ab-c3c5ad65ae78",
                            Data = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "3e01671b-18fc-4f8c-bfd8-fa12666a99b6",
                            PatientId = "9262b74c-f7b4-47ba-8fcf-087241096f34",
                            RoomId = "d36af7ac-73cb-459e-847f-0abea3581814"
                        },
                        new
                        {
                            Id = "56932a73-5813-4215-bc39-686b11a12afc",
                            Data = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "1769f6fc-fb40-44ed-bb10-70c0c13a97e3",
                            PatientId = "23159457-b301-4839-932a-3fd939f8b6c4",
                            RoomId = "4b4e2a8f-ab04-40ab-827d-3c7789208e4c"
                        },
                        new
                        {
                            Id = "64060098-a52b-4e91-b5b6-63d292cea083",
                            Data = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "ba61c248-a31d-4c10-9e7c-9d8d32defeea",
                            PatientId = "9de0d585-60a6-445c-910c-e26ccaf46274",
                            RoomId = "c5f12060-322b-42be-bba6-689e2e0c5721"
                        },
                        new
                        {
                            Id = "7fd77adc-02e5-444e-9b7e-feb2113ac22f",
                            Data = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "519e3b1c-8357-470d-9643-9be49bd669a3",
                            PatientId = "816c62f5-2b08-4042-8008-07a46b920921",
                            RoomId = "525e8058-b3a1-4a9f-83e5-355848d1e6c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "72f2ff00-761f-4727-b07c-5381992b5e0a",
                            ConcurrencyStamp = "b479b42a-5304-4bf7-a123-08b99d194e29",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c1eeb9bd-5412-495a-8abf-a4157f1b546d",
                            ConcurrencyStamp = "13d1a570-332c-4627-8481-e6206136e433",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "04d94d89-fe74-43ba-b052-90d5f3dea95f",
                            ConcurrencyStamp = "794f7ff4-9b79-47ad-b879-b9a30435e127",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66126f74-f32b-435d-9e24-b3ed8b3d6011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35153629-4e9e-4a81-8af1-2b879e51a8d4",
                            Email = "user1@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMk8U8Li73wBzqt/vmDj9utTr/+eikrHCiAuZqn8JMhMGNNzs6OvmuzRL29SuxPNsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff5c7218-1791-46e2-abdf-9230938028c8",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "26dfb75e-5f31-4a54-9844-f019998a61d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06ac39af-1856-418f-984c-b12cf0c69c80",
                            Email = "user2@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZTk6xQVU5drCexCdRkNrKS/GMISUCnqqfYiU26R1ORQGFHMuJsZLebXIyTikIgSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e511cded-756a-4c03-9916-5fec1ea12cea",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "64791af4-436d-4419-b3e1-14641bdb2493",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed1bc190-39d4-40a2-8626-2f70467b433d",
                            Email = "user3@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEJUSmV/6bHPr7sqJtVx7qnL8MVafg3Nb2vQBqaQYJ4J49qjZM9V05IEg4j72fN7JBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a1989c0-f07f-4b1b-8d75-583ef74f48fe",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "cef7f7aa-d198-4373-b441-926d8e52dbb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fa26f17-a5d1-4cb3-87ff-4a668e2dff1c",
                            Email = "user4@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAECkHBIjoD+B1pIjjnknsauhDeLSdVDgiDX7U2+s+Qrj1pp1vxXPlhiGD9QECSns/jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21df36b2-774c-4b37-8557-61b4223e66c9",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "00221f79-bc71-4186-9e5d-bfd57a80a43f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fa4dc17-904e-4fde-bc44-82d1896ec6b5",
                            Email = "user5@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYeqdwwh/0+GG3azmmk9J0mG6NAoWW1fk6oy4XAp6G9lHCio5+LLuAeRXtQMSI/uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe519440-ebfc-411f-88f5-e59bf2e2c257",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "32923230-6c8c-4510-b73e-d9bcf2484879",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f2b14a9-f9c6-4921-9ee0-4713a20794a2",
                            Email = "user6@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEPL02HilF4F2CGV/aCJpNt7ojWec+cMe8Iga8oFmPirYhT+5gzePK2iDXNQgMIV/Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd4c48f9-dece-4be3-afac-1800a085975a",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b133658-d77b-4261-acbf-07e0fcf0b463",
                            Email = "user7@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEJLBHsxLKT9qtIgeuGYYG00r5xpN+km1KZoZfoxuN7fUDs6np75sFdCEDhrrsq22HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3cde2e3d-e9d5-4a1b-ba27-4d170774b1f3",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97f0f878-b855-440f-9e12-dc63cb99a5c1",
                            Email = "user8@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEH5x3jP38zsjCy18NrLUc6/JcCTX+0JcLCCf14uN2sES0mtbkOBLbxIMor3iaS8JmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09bc0104-7449-4b80-a3a8-ce34bd06f1a1",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "ef9632fc-d406-412f-9b7a-09b902db6dfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb63eb6f-0709-4adb-993d-022c3c475b70",
                            Email = "user9@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEJAn4INCliIXm6Ocrb4yogNpg9R+JixY+GuBKlzvZ7IZeRIRpwRv9Iai0Wq6jYGW9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c495753-2bc0-4528-9cd3-98bc249644e2",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "785a5776-fbba-4021-a263-4b9daade6ac8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6827552e-6611-4427-8b8f-ffca04416963",
                            Email = "user10@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEFdy594TEj0WQnVFPV4K+GoScELkd65cMGxHgWsXlnYxI7dTuAqlSTyMOfgWqxwO6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6200945-664a-4878-b930-7eedcc385384",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "452db704-3650-457a-a7da-ca545a521776",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab29ad60-04d9-43e5-8561-d2a70293a7ca",
                            Email = "user11@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAENa/LYDqyqwIeijhFqMTAQKh5BDY4BZDFTiXzRiKYnx2N34VcHRGNf7Ebn1jjbiCmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93a58db6-63ba-4c84-93be-777640e58b05",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "538381ff-ed0b-4b53-b9b9-36832468af7c",
                            Email = "user12@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAELN6Y9t3W3osRBnNlFtGBs1IOGJCR353/06VpdzPW0/bLAU8xK7BfhXxc/44uQ9DTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3c1d08e-d6c5-4b80-b3d6-815aef2faea5",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "66126f74-f32b-435d-9e24-b3ed8b3d6011",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "26dfb75e-5f31-4a54-9844-f019998a61d1",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "64791af4-436d-4419-b3e1-14641bdb2493",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "cef7f7aa-d198-4373-b441-926d8e52dbb1",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "00221f79-bc71-4186-9e5d-bfd57a80a43f",
                            RoleId = "72f2ff00-761f-4727-b07c-5381992b5e0a"
                        },
                        new
                        {
                            UserId = "32923230-6c8c-4510-b73e-d9bcf2484879",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "ef9632fc-d406-412f-9b7a-09b902db6dfa",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "785a5776-fbba-4021-a263-4b9daade6ac8",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "452db704-3650-457a-a7da-ca545a521776",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Doctor", b =>
                {
                    b.HasOne("Egabinet.Models.Domain.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Nurse", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Egabinet.Models.Domain.TimeSheet", b =>
                {
                    b.HasOne("Egabinet.Models.Domain.Doctor", "Doctor")
                        .WithMany("TimeSheet")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Egabinet.Models.Domain.Patient", "Patient")
                        .WithMany("TimeSheet")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Egabinet.Models.Domain.Room", "Room")
                        .WithMany("TimeSheet")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Doctor", b =>
                {
                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Patient", b =>
                {
                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Egabinet.Models.Domain.Room", b =>
                {
                    b.Navigation("TimeSheet");
                });
#pragma warning restore 612, 618
        }
    }
}
