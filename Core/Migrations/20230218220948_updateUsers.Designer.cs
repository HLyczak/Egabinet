// <auto-generated />
using System;
using Egabinet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Egabinet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230218220948_updateUsers")]
    partial class updateUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = "3e01671b-18fc-4f8c-bfd8-fa12666a99b6",
                            Adress = " Kolorowa 5",
                            Name = "Adam",
                            PermissionNumber = " 569853",
                            SpecializationId = "6a3d526e-1fb6-4de7-bde5-e0754fc58aec",
                            Surname = "Kowalski",
                            UserId = "ef9632fc-d406-412f-9b7a-09b902db6dfa"
                        },
                        new
                        {
                            Id = "1769f6fc-fb40-44ed-bb10-70c0c13a97e3",
                            Adress = " Zielona 5",
                            Name = "Zofia",
                            PermissionNumber = " 560053",
                            SpecializationId = "4e8effeb-0a99-4038-9420-0c543a3a28ac",
                            Surname = "Kowalski",
                            UserId = "785a5776-fbba-4021-a263-4b9daade6ac8"
                        },
                        new
                        {
                            Id = "ba61c248-a31d-4c10-9e7c-9d8d32defeea",
                            Adress = " Adama Mickiewicza 8",
                            Name = "Todor",
                            PermissionNumber = " 160053",
                            SpecializationId = "e86959d5-6eed-45f7-b5cb-6b8f68a4d085",
                            Surname = " Nowaki",
                            UserId = "452db704-3650-457a-a7da-ca545a521776"
                        },
                        new
                        {
                            Id = "519e3b1c-8357-470d-9643-9be49bd669a3",
                            Adress = " Obozowa 8",
                            Name = "Grzegorz",
                            PermissionNumber = " 560053",
                            SpecializationId = "690e47d4-996b-43b7-a23b-d9693cf5962c",
                            Surname = "Lem",
                            UserId = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f"
                        });
                });

            modelBuilder.Entity("Core.Domain.Nurse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Nurse");

                    b.HasData(
                        new
                        {
                            Id = "9ae453af-8db3-440c-b8d0-1c55299ce188",
                            Address = " Różana 5",
                            Name = "AZofia",
                            PermissionNumber = " 509853",
                            Surname = "Stanecka",
                            UserId = "00221f79-bc71-4186-9e5d-bfd57a80a43f"
                        },
                        new
                        {
                            Id = "e40f8b49-f885-48c0-bb64-21c0d0813e88",
                            Address = " Topografów 5",
                            Name = "Hanna",
                            PermissionNumber = " 510053",
                            Surname = " Oklejka",
                            UserId = "32923230-6c8c-4510-b73e-d9bcf2484879"
                        },
                        new
                        {
                            Id = "68041977-3f99-4e4f-ac71-0b03a3606750",
                            Address = " os. Kolorowe 8",
                            Name = "Anna ",
                            PermissionNumber = " 169053",
                            Surname = " Austen",
                            UserId = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8"
                        },
                        new
                        {
                            Id = "965e09d6-0ed5-4e7a-8950-e252b1ae5380",
                            Address = " Obozowa 14",
                            Name = "Glżbieta Lem",
                            PermissionNumber = " 567053",
                            Surname = " Lockman",
                            UserId = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83"
                        });
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Pesel")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = "9262b74c-f7b4-47ba-8fcf-087241096f34",
                            Address = " Magnoliowa 5",
                            Name = "Adam",
                            Pesel = 85011259884L,
                            Surname = "Nowak",
                            UserId = "66126f74-f32b-435d-9e24-b3ed8b3d6011"
                        },
                        new
                        {
                            Id = "23159457-b301-4839-932a-3fd939f8b6c4",
                            Address = " Ostoja 5",
                            Name = "Zofia",
                            Pesel = 78020607221L,
                            Surname = "Stanecka",
                            UserId = "26dfb75e-5f31-4a54-9844-f019998a61d1"
                        },
                        new
                        {
                            Id = "9de0d585-60a6-445c-910c-e26ccaf46274",
                            Address = " Żeromskiego 4",
                            Name = "Austen",
                            Pesel = 95011259884L,
                            Surname = "Nowaki",
                            UserId = "64791af4-436d-4419-b3e1-14641bdb2493"
                        },
                        new
                        {
                            Id = "816c62f5-2b08-4042-8008-07a46b920921",
                            Address = " Obozowa 15",
                            Name = "Grzegorz",
                            Pesel = 65011259884L,
                            Surname = "Fus",
                            UserId = "cef7f7aa-d198-4373-b441-926d8e52dbb1"
                        });
                });

            modelBuilder.Entity("Core.Domain.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = "d36af7ac-73cb-459e-847f-0abea3581814",
                            Number = 1L
                        },
                        new
                        {
                            Id = "4b4e2a8f-ab04-40ab-827d-3c7789208e4c",
                            Number = 2L
                        },
                        new
                        {
                            Id = "c5f12060-322b-42be-bba6-689e2e0c5721",
                            Number = 3L
                        },
                        new
                        {
                            Id = "525e8058-b3a1-4a9f-83e5-355848d1e6c5",
                            Number = 4L
                        });
                });

            modelBuilder.Entity("Core.Domain.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            Id = "6a3d526e-1fb6-4de7-bde5-e0754fc58aec",
                            Value = "Lekarz rodzinny"
                        },
                        new
                        {
                            Id = "4e8effeb-0a99-4038-9420-0c543a3a28ac",
                            Value = "Endokrynolog"
                        },
                        new
                        {
                            Id = "e86959d5-6eed-45f7-b5cb-6b8f68a4d085",
                            Value = "Laryngolog"
                        },
                        new
                        {
                            Id = "690e47d4-996b-43b7-a23b-d9693cf5962c",
                            Value = "Stomatolog"
                        });
                });

            modelBuilder.Entity("Core.Domain.TimeSheet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("TimeSheet");

                    b.HasData(
                        new
                        {
                            Id = "06223eb9-588c-4b2d-a0ab-c3c5ad65ae78",
                            Data = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "3e01671b-18fc-4f8c-bfd8-fa12666a99b6",
                            PatientId = "9262b74c-f7b4-47ba-8fcf-087241096f34",
                            RoomId = "d36af7ac-73cb-459e-847f-0abea3581814"
                        },
                        new
                        {
                            Id = "56932a73-5813-4215-bc39-686b11a12afc",
                            Data = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "1769f6fc-fb40-44ed-bb10-70c0c13a97e3",
                            PatientId = "23159457-b301-4839-932a-3fd939f8b6c4",
                            RoomId = "4b4e2a8f-ab04-40ab-827d-3c7789208e4c"
                        },
                        new
                        {
                            Id = "64060098-a52b-4e91-b5b6-63d292cea083",
                            Data = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "ba61c248-a31d-4c10-9e7c-9d8d32defeea",
                            PatientId = "9de0d585-60a6-445c-910c-e26ccaf46274",
                            RoomId = "c5f12060-322b-42be-bba6-689e2e0c5721"
                        },
                        new
                        {
                            Id = "7fd77adc-02e5-444e-9b7e-feb2113ac22f",
                            Data = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "519e3b1c-8357-470d-9643-9be49bd669a3",
                            PatientId = "816c62f5-2b08-4042-8008-07a46b920921",
                            RoomId = "525e8058-b3a1-4a9f-83e5-355848d1e6c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "72f2ff00-761f-4727-b07c-5381992b5e0a",
                            ConcurrencyStamp = "2cca840f-c78d-4a3e-aa4c-6abc005df715",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c1eeb9bd-5412-495a-8abf-a4157f1b546d",
                            ConcurrencyStamp = "4fec1402-6201-4288-a8e7-b28eca3f1919",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "04d94d89-fe74-43ba-b052-90d5f3dea95f",
                            ConcurrencyStamp = "3c88adda-eafc-493e-81f8-e8bc2d28e9e3",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66126f74-f32b-435d-9e24-b3ed8b3d6011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0b2e686-fd85-4a96-ad6f-3771475b2566",
                            Email = "user1@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@OP.PL",
                            NormalizedUserName = "USER1@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEA9TwQ8M8PzAODqSuQweHFLYx4votn0WkD/dWoV4SvWopATa+Dfo+9SWAMeqxvsMpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41ffeb77-be57-4a5b-a9c4-08aa2bd4ed61",
                            TwoFactorEnabled = false,
                            UserName = "user1@op.pl"
                        },
                        new
                        {
                            Id = "26dfb75e-5f31-4a54-9844-f019998a61d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "208c068b-d768-41fb-b1ed-0cee2faf6f52",
                            Email = "user2@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@OP.PL",
                            NormalizedUserName = "USER2@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAENJ622jmZtOBJaxO4bSJxRdFlLiD7Ica8IOpl6Z1E4o3jd25lWcLz3yfozb2axwPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce219bfa-ebbc-4065-9bd1-512dddc7dbc6",
                            TwoFactorEnabled = false,
                            UserName = "user2@op.pl"
                        },
                        new
                        {
                            Id = "64791af4-436d-4419-b3e1-14641bdb2493",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b7b220b-3f43-449e-a78b-38ca3d4feb16",
                            Email = "user3@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@OP.PL",
                            NormalizedUserName = "USER3@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDdZ4lGk94f47iUXld0k6SNYCvOWtDqqmTejvoF9+3uedsQlbXIto1zsAEM9kJJLMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "037ab5e1-a623-4c88-bdb0-1631fa9d08ab",
                            TwoFactorEnabled = false,
                            UserName = "user3@op.pl"
                        },
                        new
                        {
                            Id = "cef7f7aa-d198-4373-b441-926d8e52dbb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "142e8082-e319-490d-9228-5bde073f663e",
                            Email = "user4@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@OP.PL",
                            NormalizedUserName = "USER4@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAENktTmyWK8gpLvzqfZqvZ5RIBCERa2M+nsEDCjfmUU527SPKVU07AKcWKT7jPJJ/bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "225c7e78-54c9-4633-937d-9a72b9a041e6",
                            TwoFactorEnabled = false,
                            UserName = "user4@op.pl"
                        },
                        new
                        {
                            Id = "00221f79-bc71-4186-9e5d-bfd57a80a43f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55aab979-249f-4db6-9bc6-e379499bb811",
                            Email = "user5@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@OP.PL",
                            NormalizedUserName = "USER5@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEPyrmbMX9kh0D/c7IQp7G3mLD0Y1lryIhFw+YYLiSkt+COjelBPRTu4YgO4p0wd0TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d664e3b4-1ecc-463d-80d7-e69e86d9b51f",
                            TwoFactorEnabled = false,
                            UserName = "user5@op.pl"
                        },
                        new
                        {
                            Id = "32923230-6c8c-4510-b73e-d9bcf2484879",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6837326e-f7ad-4438-8ef8-09d3b70e5f78",
                            Email = "user6@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@OP.PL",
                            NormalizedUserName = "USER6@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtlo32QBhbr9tGYySbaXqxO0zitROGvWHKqttRe5QP1R36Pmk7pn1GV9Kzs1fgzjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fdc2253-1fe0-46ff-a877-0347ec4dba9b",
                            TwoFactorEnabled = false,
                            UserName = "user6@op.pl"
                        },
                        new
                        {
                            Id = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4c55fc8-977d-4c19-9be3-c19cd587c48c",
                            Email = "user7@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@OP.PL",
                            NormalizedUserName = "USER7@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEIzrVbFNUHNfJyX/RP13v/IIsdNWk3oV30zdWkXg5OeyRj0twfNYTHEG5IPdp/d4Gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "894f20e4-1ad3-4c90-99cb-9d2a49955c29",
                            TwoFactorEnabled = false,
                            UserName = "user7@op.pl"
                        },
                        new
                        {
                            Id = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "786a447a-3204-4499-a6e0-bf29aab32578",
                            Email = "user8@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@OP.PL",
                            NormalizedUserName = "USER8@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTXl4OapV8BLNogPvLt1dZd61WouBVMM56vmFufjpqavZtveI5eu7puDFOgzC87Og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbc6ddf9-5250-4566-8b23-9e7874a219a5",
                            TwoFactorEnabled = false,
                            UserName = "user8@op.pl"
                        },
                        new
                        {
                            Id = "ef9632fc-d406-412f-9b7a-09b902db6dfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6296024-281f-4602-9611-d5c35babed14",
                            Email = "user9@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@OP.PL",
                            NormalizedUserName = "USER9@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHCS+rcLUHdlej/FSS2wFYcHKT/1DUPOme1wb7EEXkoXfiW/SXWMD/sMaarTLZ9tTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b8443b5-4681-4b1c-a9e4-637b4f540835",
                            TwoFactorEnabled = false,
                            UserName = "user9@op.pl"
                        },
                        new
                        {
                            Id = "785a5776-fbba-4021-a263-4b9daade6ac8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f69058e3-0020-4c43-8504-23ba71b412ee",
                            Email = "user10@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@OP.PL",
                            NormalizedUserName = "USER10@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGCWqjzFOpHFIFR9RqOjOhHi/VapenKtVtKhH12r1ocQpa/67USgYS17Ixc0RmACnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "672fd736-5b99-4c96-95c5-c557f2d2e187",
                            TwoFactorEnabled = false,
                            UserName = "user10@op.pl"
                        },
                        new
                        {
                            Id = "452db704-3650-457a-a7da-ca545a521776",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f242fb9d-a536-48a4-a5d2-8bb43ca3593c",
                            Email = "user11@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@OP.PL",
                            NormalizedUserName = "USER11@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7nzUjTDJaKW5A3PihwKmg7xooX8LWr5192ro72lkpnjN0BkqZxdOfmukSnB9+sJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3b18b85-240d-4832-8482-fd0620601e62",
                            TwoFactorEnabled = false,
                            UserName = "user11@op.pl"
                        },
                        new
                        {
                            Id = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "357642ec-830a-46ba-b6df-45887bc9fe94",
                            Email = "user12@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@OP.PL",
                            NormalizedUserName = "USER12@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcHxtorwYcFQL3LF6HL+3nZWIL8OF59XrZ+Cz2N+qz2ryj7XNzpIOAZVl19CGWgzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9544d9f5-5038-4005-9388-cb3997f335e6",
                            TwoFactorEnabled = false,
                            UserName = "user12@op.pl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "66126f74-f32b-435d-9e24-b3ed8b3d6011",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "26dfb75e-5f31-4a54-9844-f019998a61d1",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "64791af4-436d-4419-b3e1-14641bdb2493",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "cef7f7aa-d198-4373-b441-926d8e52dbb1",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "00221f79-bc71-4186-9e5d-bfd57a80a43f",
                            RoleId = "72f2ff00-761f-4727-b07c-5381992b5e0a"
                        },
                        new
                        {
                            UserId = "32923230-6c8c-4510-b73e-d9bcf2484879",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "ef9632fc-d406-412f-9b7a-09b902db6dfa",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "785a5776-fbba-4021-a263-4b9daade6ac8",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "452db704-3650-457a-a7da-ca545a521776",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Doctor", b =>
                {
                    b.HasOne("Core.Domain.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Nurse", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.TimeSheet", b =>
                {
                    b.HasOne("Core.Domain.Doctor", "Doctor")
                        .WithMany("TimeSheet")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Patient", "Patient")
                        .WithMany("TimeSheet")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Room", "Room")
                        .WithMany("TimeSheet")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Doctor", b =>
                {
                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Core.Domain.Room", b =>
                {
                    b.Navigation("TimeSheet");
                });
#pragma warning restore 612, 618
        }
    }
}
